"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[343],{8453:(e,t,r)=>{r.d(t,{R:()=>i,x:()=>a});var o=r(6540);const n={},s=o.createContext(n);function i(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),o.createElement(s.Provider,{value:t},e.children)}},9921:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guides/git-operations","title":"Working with Git","description":"The app allows you to perform a few separate git-related operations, these are documented below.","source":"@site/docs/guides/git-operations.md","sourceDirName":"guides","slug":"/guides/git-operations","permalink":"/docs/guides/git-operations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Guides","permalink":"/docs/category/guides"},"next":{"title":"Importing GPG keys","permalink":"/docs/guides/importing-gpg-key"}}');var n=r(4848),s=r(8453);const i={},a="Working with Git",l={},c=[{value:"Push to remote",id:"push-to-remote",level:2},{value:"Pull from remote",id:"pull-from-remote",level:2},{value:"Synchronize repository",id:"synchronize-repository",level:2},{value:"Hard reset to remote branch",id:"hard-reset-to-remote-branch",level:2},{value:"Abort rebase and push new changes",id:"abort-rebase-and-push-new-changes",level:2}];function h(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"working-with-git",children:"Working with Git"})}),"\n",(0,n.jsx)(t.p,{children:"The app allows you to perform a few separate git-related operations, these are documented below."}),"\n",(0,n.jsx)(t.h2,{id:"push-to-remote",children:"Push to remote"}),"\n",(0,n.jsxs)(t.p,{children:["This is equivalent to ",(0,n.jsx)(t.code,{children:"git push --all origin"}),". It pushes all the branches in the local repository to your specified remote."]}),"\n",(0,n.jsx)(t.h2,{id:"pull-from-remote",children:"Pull from remote"}),"\n",(0,n.jsxs)(t.p,{children:["Equivalent to ",(0,n.jsx)(t.code,{children:"git pull --rebase origin"}),", pulls from the origin remote and rebases any local changes that are not upstream."]}),"\n",(0,n.jsx)(t.h2,{id:"synchronize-repository",children:"Synchronize repository"}),"\n",(0,n.jsxs)(t.p,{children:["Equivalent to running ",(0,n.jsx)(t.code,{children:"git pull --rebase origin && git push --all origin"}),". This does a 'Pull from remote', commits if there are any changes, then does 'Push to remote' \u2014 all in one go."]}),"\n",(0,n.jsx)(t.h2,{id:"hard-reset-to-remote-branch",children:"Hard reset to remote branch"}),"\n",(0,n.jsxs)(t.p,{children:["Equivalent to ",(0,n.jsx)(t.code,{children:"git fetch origin --all && git reset --hard origin/master"}),". Discards all local changes and resets the repository to the remote state. Useful for when your local repo has entered a bad state but you have no local changes that need to synced."]}),"\n",(0,n.jsx)(t.h2,{id:"abort-rebase-and-push-new-changes",children:"Abort rebase and push new changes"}),"\n",(0,n.jsxs)(t.p,{children:["If the repository is in a rebasing state, this will create a new branch from your current state and push it to your remote repository so you can resolve the conflicts and update the ",(0,n.jsx)(t.code,{children:"main"})," branch which the app will then pull."]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);